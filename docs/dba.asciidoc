
= DBA Container
Crunchy Data Solutions, Inc.
v1.2, {docdate}
:title-logo-image: image:crunchy_logo.png["CrunchyData Logo",align="center",scaledwidth="80%"]

== Purpose

The crunchy-dba container implements a cron scheduler.  The purpose
of the crunchy-dba container is to offer a way to perform
simple DBA tasks that occur on some form of schedule such as
backup jobs or running a vacuum on a *single* Postgres database container.

You can either run the crunchy-dba container as a single pod or include
the container within a database pod.

The crunchy-dba container makes use of a Service Account to perform
the startup of scheduled jobs.  The Kube Job type is used to execute
the scheduled jobs with a Restart policy of Never.

=== Environment Variables

The following environment variables control the actions
of crunchy-dba:

 * OSE_PROJECT - required, the OSE project name to log into
 * JOB_HOST - required, the postgres container name the action will be taken against
 * VAC_SCHEDULE - if set, this will start a vacuum job container.  The
 setting value must be a valid cron expression as described below.
 * BACKUP_SCHEDULE - if set, this will start a backup job container.  The
 setting value must be a valid cron expression as described below.

For a vacuum job, you are required to supply the following
environment variables:

 * PG_USER
 * PG_PASSWORD
 * JOB_HOST

Optional environment variables include:

 * PG_DATABASE - defaults to postgres when not specified
 * PG_PORT - defaults to 5432 when not specified
 * VAC_ANALYZE - defaults to true when not specified
 * VAC_FULL - defaults to true when not specified
 * VAC_VERBOSE - defaults to true when not specified
 * VAC_FREEZE - defaults to false when not specified
 * VAC_TABLE - defaults to all tables when not specified, or you
 can set this value to indicate a single table to vacuum

== CRON Expression Format

A cron expression represents a set of times, using 6 space-separated fields.

.Table Fields
|===
|Field name   | Mandatory? | Allowed values  | Allowed special characters

|Seconds      
|Yes        
|0-59            
|* / , -

|Minutes      
|Yes        
|0-59            
|* / , -

|Hours        
|Yes        
|0-23            
|* / , -

|Day of month 
|Yes        
|1-31            
|* / , - ?

|Month        
|Yes        
|1-12 or JAN-DEC 
|* / , -

|Day of week  
|Yes        
|0-6 or SUN-SAT  
|* / , - ?
|===


Note: Month and Day-of-week field values are case insensitive.  "SUN", "Sun",
and "sun" are equally accepted.

=== Special Characters

==== Asterisk ( * )

The asterisk indicates that the cron expression will match for all values 
of the field; e.g., using an asterisk in the 5th field (month) would 
indicate every month.

==== Slash ( / )

Slashes are used to describe increments of ranges. For example 3-59/15 in 
the 1st field (minutes) would indicate the 3rd minute of the hour and every 
15 minutes thereafter. The form "*\/..." is equivalent to the form 
"first-last/...", that is, an increment over the largest possible range of 
the field.  The form "N/..." is accepted as meaning "N-MAX/...", that is, 
starting at N, use the increment until the end of that specific range.  
It does not wrap around.

==== Comma ( , )

Commas are used to separate items of a list. For example, using 
"MON,WED,FRI" in the 5th field (day of week) would mean Mondays, 
Wednesdays and Fridays.

==== Hyphen ( - )

Hyphens are used to define ranges. For example, 9-17 would indicate every
hour between 9am and 5pm inclusive.

==== Question mark ( ? )

Question mark may be used instead of '*' for leaving either day-of-month or
day-of-week blank.

=== Predefined schedules

You may use one of several pre-defined schedules in place of a cron expression.

.Table Predefined Schedules
|===
|Entry|Description|Equivalent To

|@yearly (or @annually) 
| Run once a year, midnight, Jan. 1st        
| 0 0 0 1 1 *

|@monthly               
| Run once a month, midnight, first of month 
| 0 0 0 1 * *

|@weekly                
| Run once a week, midnight on Sunday        
| 0 0 0 * * 0

|@daily (or @midnight)  
| Run once a day, midnight                   
| 0 0 0 * * *

|@hourly                
| Run once an hour, beginning of hour        
| 0 0 * * * *
|===

=== Intervals

You may also schedule a job to execute at fixed intervals.  This is 
supported by formatting the cron spec like this:

....
@every <duration>
....

where "duration" is a string accepted by time.ParseDuration
(http://golang.org/pkg/time/#ParseDuration).

For example, "@every 1h30m10s" would indicate a schedule that activates every
1 hour, 30 minutes, 10 seconds.

Note: The interval does not take the job runtime into account.  For example,
if a job takes 3 minutes to run, and it is scheduled to run every 5 minutes,
it will have only 2 minutes of idle time between each run.

=== Time zones

All interpretation and scheduling is done in the machines local 
time zone (as provided by the Go time package 
(http://www.golang.org/pkg/time).  Be aware that jobs scheduled during 
daylight-savings leap-ahead transitions will not be run!

== Legal Notices 

Copyright Â© 2016 Crunchy Data Solutions, Inc.

CRUNCHY DATA SOLUTIONS, INC. PROVIDES THIS GUIDE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Crunchy, Crunchy Data Solutions, Inc. and the Crunchy Hippo Logo are trademarks of Crunchy Data Solutions, Inc.

